syntax = "proto3";

option csharp_namespace = "Utilities.Billing.Api.Protos";

import "Protos/data.proto";
import "google/api/annotations.proto";
package stellar;

// API for issuing invoices for consumed housing and communal services in Stellar.
service StellarService 
{
  // Add information to the system about tenant (management company)
  rpc AddTenant(AddTenantRequest) returns (AddTenantResponse) {
    option (google.api.http) = {
      post: "/v1/tenants"
      body: "*"
    };
  }

  // Change the parameters of a registered tenant (management company)
  rpc UpdateTenant(UpdateTenantRequest) returns (UpdateTenantResponse) {
    option (google.api.http) = {
      put: "/v1/tenants"
      body: "*"
    };
  }


  // Add information to the system about the consumed housing and communal services resource (electricity, water, etc.)
  rpc AddAsset(AddAssetRequest) returns (AddAssetResponse) {
    option (google.api.http) = {
      post: "/v1/assets"
      body: "*"
    };
  }

  // Change the parameters of a registered housing and communal services resource (electricity, water, etc.)
  rpc UpdateAsset(UpdateAssetRequest) returns (UpdateAssetResponse) {
    option (google.api.http) = {
      put: "/v1/assets"
      body: "*"
    };
  }

  // Get the parameters of the registered housing and communal services resource (electricity, water, etc.)
  rpc GetAsset(GetAssetRequest) returns (GetAssetResponse) {
    option (google.api.http) = {
      get: "/v1/assets"
    };
  }

  // Create a personal meter account. Accounts are managed by the system, consumers can only track the movements of tokens in the account.
  rpc CreateCustomerAccount(CreateCustomerAccountRequest) returns (CreateCustomerAccountResponse) {
    option (google.api.http) = {
      post: "/v1/accounts"
      body: "*"
    };
  }

  // Receive personal account information for the metering device. Accounts are managed by the system, consumers can only track the movements of tokens in the account.
  rpc GetCustomerAccount(GetCustomerAccountRequest) returns (GetCustomerAccountResponse) {
    option (google.api.http) = {
      get: "/v1/accounts"
    };
  }

  // Create an invoice pre-signed by the system to pay for resource consumption
  rpc CreateInvoice(CreateInvoiceRequest) returns (CreateInvoiceResponse) {
    option (google.api.http) = {
      post: "/v1/invoices"
      body: "*"
    };
  }

  // Get a list of invoices for a given meter and time period.
  rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse) {
    option (google.api.http) = {
      get: "/v1/invoices"
    };
  }
}

message AddTenantRequest
{
    // Tenant Id (uuid)
    string id = 1;
    // Tenant Name
    string name = 2;
    // AccountId in Stellar
    string account = 3;
}
message AddTenantResponse 
{
    string id = 1;
}

message UpdateTenantRequest
{
    // Tenant Id (uuid)
    string id = 1;
    // Tenant Name
    string name = 2;
    // AccountId in Stellar
    string account = 3;
}
message UpdateTenantResponse 
{
}

message AddAssetRequest
{
  string tenantId = 1;
  // Asset Code
  string assetCode = 2;

  // Issuer Account Id
  string issuer = 3;

  // Equipment model codes
  repeated string modelCodes = 4;

}

message AddAssetResponse
{
  // Asset ID in the system (uuid)
  string assetId = 1;

}

message UpdateAssetRequest
{
  string tenantId = 1;
  // Asset ID in the system (uuid)
  string assetId = 2;

  // Equipment model codes
  repeated string modelCodes = 3;
}

message UpdateAssetResponse
{

}

message GetAssetRequest
{
  string tenantId = 1;
  // Asset ID in the system (uuid)
  string assetId = 2;

}

message GetAssetResponse
{
  // Asset ID in the system (uuid)
  string assetId = 1;
  // Asset Code
  string assetCode = 2;
  // Issuer Account Id
  string issuerAccount = 3;
  // Model codes for metering equipment. When setting them up, you can check the device documentation.
  repeated string modelCodes = 4;
  // System account. You need to transfer tokens to this account, which the system will redistribute across meter accounts. 
  // The trustline for the token is configured automatically.
  string masterAccount = 5;
}

message CreateCustomerAccountRequest
{
  string tenantId = 1;
  // Asset ID in the system (uuid)
  string assetId = 2;
  // Permanent identifier of the controller
  string deviceSerial = 3;
  // Number of metering device
  string inputCode = 4;
  // Create a separate account (G-) for the meter or a multiplexed account (M-). In the case of G accounts, the movement of tokens will be clearly visible in the explorer, 
  // balances will be controlled by the blockchain, negative balances will not be possible, transactions will be more expensive. In the case of M accounts in the operation explorer 
  // by consumption will be visible in a general list for all metering devices, negative balances will be possible, the balance will not be controlled by the blockchain. 
  // In any case, the created account will be managed only through the system account associated with the asset. 
  bool createMuxed = 5;
}

message CreateCustomerAccountResponse
{
  // Account identifier in the system (uuid)
  string customerAccountId = 1;
}

message GetCustomerAccountRequest
{
  string tenantId = 1;
  // Account identifier in the system (uuid)
  string customerAccountId = 2;
}

message GetCustomerAccountResponse
{
  // Account identifier in the system (uuid)
  string customerAccountId = 1;
  // Meter account
  string customerAccount = 2;
  // Asset ID
  string assetId = 3;
  // Asset code
  string asset = 4;
  // Asset account
  string issuer = 5;
  // System account
  string masterAccount = 6;
}

message CreateInvoiceRequest
{
  string tenantId = 1;
  // Account identifier in the system (uuid)
  string customerAccountId = 2;
  // Payer account
  string payerAccount = 3;
  // Replenishment amount, in tokens. '.' is used as a decimal separator.
  string amount = 4;
}

message CreateInvoiceResponse
{
  // Transaction pre-signed by the master account. The consumer needs to sign the transaction with their key and submit.
  string invoiceXdr = 1;
}

message ListInvoicesRequest
{
  string tenantId = 1;
  // Account ID in the system (uuid)
  string customerAccountId = 2;
  // Start of period, unix timestamp, seconds
  uint64 periodFrom = 3;
  // End of period, unix timestamp, seconds
  uint64 periodTo = 4;
}

message ListInvoicesResponse
{
  repeated InvoicesListItem items = 1;

  message InvoicesListItem
  {
    // Transaction ID
    string transactionId = 1;
    // Replenishment amount, in tokens
    string amount = 2;
    // Fullfilled
    bool processed = 3;
    // Transaction Envelope XDR
    string xdr = 4;
  }
}